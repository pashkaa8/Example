[{"uri":"http://localhost:8901/index.html","title":"index","content":"This is my page. My name is Povilas.\r\n\r\nThis is a test text."},{"uri":"http://localhost:8901/test.html","title":"test","content":"let list = [1;2;3;4;5]\n\nprintfn $\u0022{list}\u0022\n\n#load \u0022YahooFinance.fsx\u0022\n\nopen YahooFinance\n\nlet ticker = YahooFinance.PriceHistory(\u0022AAPL\u0022)\n\nticker.[..3]\n\n#r \u0022nuget: Plotly.NET,2.0.0-preview.17\u0022\n\nopen Plotly.NET\n\nticker |\u003E List.map (fun x -\u003E x.Date, x.AdjustedClose)\n|\u003E Chart.Line |\u003E GenericChart.toChartHTML\n\n(***include-it-raw***)\n\nlet list = [1;2;3]\nlist\n\n(***include-it***)"},{"uri":"http://localhost:8901/YahooFinance.html","title":"YahooFinance","content":"(**\n[![Script](img/badge-script.svg)](/Teaching//YahooFinance.fsx)\n\nBased on code from [https://github.com/aexsalomao/YahooFinance/](https://github.com/aexsalomao/YahooFinance/)\n\n*)\n#r \u0022nuget: FSharp.Data\u0022\n\nopen System\nopen FSharp.Data\n\ntype Interval = \n    | Daily\n    | Weekly\n    | Monthly\n    override this.ToString() = \n        match this with\n        | Daily -\u003E \u00221d\u0022\n        | Weekly -\u003E \u00221wk\u0022\n        | Monthly -\u003E \u00221mo\u0022\n\ntype PriceObs = \n    { Symbol : string\n      Date : DateTime\n      Open : float\n      High : float\n      Low : float\n      Close : float\n      AdjustedClose : float\n      Volume : float }\n\ntype private PriceObsCsv = CsvProvider\u003CSample=\u0022Date (date),Open (float),High (float),Low (float), Close (float),AdjClose (float),Volume (float)\u0022\u003E\nlet private parseYahooPriceHistory symbol result = \n    PriceObsCsv.Parse(result).Rows\n    |\u003E Seq.map (fun x -\u003E \n        { Symbol = symbol \n          Date = x.Date\n          Open = x.Open\n          High = x.High\n          Low = x.Low\n          Close = x.Close \n          AdjustedClose = x.AdjClose\n          Volume = x.Volume })\n    |\u003E Seq.toArray\n\n\nlet private cc = System.Net.CookieContainer()\nlet private retryCount = 5\nlet private parallelSymbols = 5\n\ntype YahooFinance =\n    static member PriceHistory(symbols: seq\u003Cstring\u003E,?startDate: DateTime,?endDate: DateTime,?interval: Interval) =\n        let symbols = Seq.toList symbols\n        let startDate = defaultArg startDate (DateTime.Now.AddYears(-1))\n        let endDate = defaultArg endDate (DateTime.Now)\n        let interval = defaultArg interval Interval.Monthly\n\n        let generateYahooUrl (symbol: string) (startDate: DateTime) (endDate: DateTime) (interval: Interval) =\n            let time dt = DateTimeOffset(dt).ToUnixTimeSeconds()\n            $\u0022https://query1.finance.yahoo.com/v7/finance/download/{symbol}?\u0022 \u002B\n            $\u0022period1={time startDate}\u0026period2={time endDate}\u0026interval={interval}\u0022 \u002B\n            $\u0022\u0026events=history\u0026includeAdjustedClose=true\u0022\n        \n        let rec yahooRequest attempt symbol =\n            async {\n                let url = generateYahooUrl symbol startDate endDate interval\n                try\n                    let! result = \n                        Http.AsyncRequestString(\n                            url = url, \n                            httpMethod = \u0022GET\u0022,\n                            query = [\u0022format\u0022,\u0022csv\u0022],\n                            headers = [HttpRequestHeaders.Accept HttpContentTypes.Csv],\n                            cookieContainer = cc)\n                    return parseYahooPriceHistory symbol result\n                with e -\u003E\n                    if attempt \u003E 0 then\n                        return! yahooRequest (attempt - 1) symbol\n                    else return! failwith $\u0022Failed to request {symbol}, Error: {e}\u0022\n            }\n        let rec getSymbols (symbols: list\u003Cstring\u003E) output parallelSymbols =\n            let download thisDownload =\n                [| for symbol in thisDownload do \n                    yahooRequest retryCount symbol |]\n                |\u003E Async.Parallel\n                |\u003E Async.RunSynchronously\n                |\u003E Array.collect id\n                |\u003E Array.toList\n\n            if symbols.Length \u003E parallelSymbols then\n                let thisDownload, remaining = symbols |\u003E List.splitAt parallelSymbols\n                let result = download thisDownload\n                System.Threading.Thread.Sleep(1000) // Throttle 1 sec per batch of symbols\n                getSymbols remaining (result @ output) parallelSymbols\n            else\n                let result = download symbols\n                result @ output\n        getSymbols symbols [] parallelSymbols                \n    static member PriceHistory(symbol: string,?startDate: DateTime,?endDate: DateTime,?interval: Interval) =\n        YahooFinance.PriceHistory(symbols=[symbol],?startDate=startDate,?endDate=endDate,?interval=interval)\n"}]